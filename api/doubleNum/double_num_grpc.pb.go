// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: doubleNum/double_num.proto

package doubleNum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoubleNumClient is the client API for DoubleNum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoubleNumClient interface {
	DoubleNum(ctx context.Context, in *DoubleNumRequest, opts ...grpc.CallOption) (*DoubleNumResponse, error)
	TripleNum(ctx context.Context, in *TripleNumRequest, opts ...grpc.CallOption) (*TripleNumResponse, error)
}

type doubleNumClient struct {
	cc grpc.ClientConnInterface
}

func NewDoubleNumClient(cc grpc.ClientConnInterface) DoubleNumClient {
	return &doubleNumClient{cc}
}

func (c *doubleNumClient) DoubleNum(ctx context.Context, in *DoubleNumRequest, opts ...grpc.CallOption) (*DoubleNumResponse, error) {
	out := new(DoubleNumResponse)
	err := c.cc.Invoke(ctx, "/doubleNum.DoubleNum/DoubleNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doubleNumClient) TripleNum(ctx context.Context, in *TripleNumRequest, opts ...grpc.CallOption) (*TripleNumResponse, error) {
	out := new(TripleNumResponse)
	err := c.cc.Invoke(ctx, "/doubleNum.DoubleNum/TripleNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoubleNumServer is the server API for DoubleNum service.
// All implementations must embed UnimplementedDoubleNumServer
// for forward compatibility
type DoubleNumServer interface {
	DoubleNum(context.Context, *DoubleNumRequest) (*DoubleNumResponse, error)
	TripleNum(context.Context, *TripleNumRequest) (*TripleNumResponse, error)
	mustEmbedUnimplementedDoubleNumServer()
}

// UnimplementedDoubleNumServer must be embedded to have forward compatible implementations.
type UnimplementedDoubleNumServer struct {
}

func (UnimplementedDoubleNumServer) DoubleNum(context.Context, *DoubleNumRequest) (*DoubleNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoubleNum not implemented")
}
func (UnimplementedDoubleNumServer) TripleNum(context.Context, *TripleNumRequest) (*TripleNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripleNum not implemented")
}
func (UnimplementedDoubleNumServer) mustEmbedUnimplementedDoubleNumServer() {}

// UnsafeDoubleNumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoubleNumServer will
// result in compilation errors.
type UnsafeDoubleNumServer interface {
	mustEmbedUnimplementedDoubleNumServer()
}

func RegisterDoubleNumServer(s grpc.ServiceRegistrar, srv DoubleNumServer) {
	s.RegisterService(&DoubleNum_ServiceDesc, srv)
}

func _DoubleNum_DoubleNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubleNumServer).DoubleNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doubleNum.DoubleNum/DoubleNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubleNumServer).DoubleNum(ctx, req.(*DoubleNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoubleNum_TripleNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripleNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubleNumServer).TripleNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doubleNum.DoubleNum/TripleNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubleNumServer).TripleNum(ctx, req.(*TripleNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoubleNum_ServiceDesc is the grpc.ServiceDesc for DoubleNum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoubleNum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doubleNum.DoubleNum",
	HandlerType: (*DoubleNumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoubleNum",
			Handler:    _DoubleNum_DoubleNum_Handler,
		},
		{
			MethodName: "TripleNum",
			Handler:    _DoubleNum_TripleNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doubleNum/double_num.proto",
}
